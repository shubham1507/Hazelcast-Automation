---
- name: 'Check mandatory variables are defined'
  assert:
    that:
    - action is defined

- name: Copying stop_start.sh script to remote server
  copy:
    src: stop_start.sh
    dest: /home/hzadm
    mode: '0755'

- block:
    - name: Run stop_start.sh script to stop cluster
      shell: ./stop_start.sh stop "{{ clusterName }}" "{{ containerName }}"
      args:
        chdir: /home/hzadm
      register: command_output
  rescue:
    - name: Handle skipped stop command
      set_fact:
        command_output:
          skipped: true
          stdout: "Process not running or stop command skipped."

- name: Stop output
  debug:
    msg: "Stop output: {{ command_output.stdout }}"

- name: Check that the pid file exists
  stat:
    path: /opt/HZ/hazelcast/bin/{{ clusterName }}_{{ containerName }}.pid
  register: stat_result

- name: Check if process is running
  shell: "ps -p $(cat /opt/HZ/hazelcast/bin/{{ clusterName }}_{{ containerName }}.pid) > /dev/null 2>&1"
  register: pid_check
  ignore_errors: true

- name: Fail if process not running
  fail:
    msg: "Process not running according to PID file."
  when: stat_result.stat.exists and pid_check.rc != 0 and action == "restart"

- name: Pause for 60 seconds before starting again
  pause:
    seconds: 60
  when: action == "restart"

- block:
    - name: Run stop_start.sh script start cluster
      shell: ./stop_start.sh start "{{ clusterName }}" "{{ containerName }}"
      args:
        chdir: /home/hzadm
      register: command_output_start
  rescue:
    - name: Handle skipped start command
      set_fact:
        command_output_start:
          skipped: true
          stdout: "Start command skipped."

- name: Start output
  debug:
    msg: "Start output: {{ command_output_start.stdout }}"

- name: Remove temporary stop_start.sh file (delete file)
  file:
    path: /home/hzadm/stop_start.sh
    state: absent

- name: Output of 'ps -ef|grep java |grep "{{ clusterName }}_{{ containerName }}"' command
  shell: ps -ef|grep java |grep "{{ clusterName }}_{{ containerName }}"
  register: command_output_process
- name: java process check
  debug:
    msg: "Java process check: {{ command_output_process.stdout_lines }}"
