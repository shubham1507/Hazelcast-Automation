pipeline {
    agent { label 'cm-linux' }

    stages {
        stage('HZ-configfile-deployment') {
            steps {
                script {
                    cleanWs()

                    def userName
                    def password
                    def foldername = pwd().split("/")[-2]

                    // Clone Hazelcast Services repository
                    git branch: "main",
                        credentialsId: "SBINET-G3-DEV-GITHUB-OAUTH",
                        url: "https://alm-github.systems.uk.SBI/dtc-hazelcast/Hazelcast-Services.git"

                    // Clone jq repository
                    sh "mkdir jqdir"
                    dir('jqdir') {
                        git branch: "master",
                            credentialsId: "SBINET-G3-DEV-GITHUB-OAUTH",
                            url: "https://alm-github.systems.uk.SBI/sprintnet/jq.git"
                    }

                    sh "chmod +x jqdir/jq"
                    sh "mv jqdir/jq ./"

                    dir("${pwd()}/${foldername}/") {
                        sh "cat Environments.groovy >> env.txt"
                        def envList = readFile 'env.txt'

                        properties([
                            parameters([
                                choice(name: 'Environment', choices: envList, description: 'Select environment'),
                                choice(name: 'Logging_type', choices: ["jdk", "log4j2"], description: 'Select logging type'),
                                choice(name: 'mancenter', choices: ["Yes", "No"], description: 'Enable mancenter?'),
                                choice(name: 'backup', choices: ["Yes", "No"], description: 'Enable backup?'),
                                string(name: 'HostName', defaultValue: '', description: 'Enter Server Name'),
                                string(name: 'sourcePath', defaultValue: '', description: 'Enter source path'),
                                string(name: 'destPath', defaultValue: '', description: 'Enter destination path'),
                                string(name: 'artifactId', defaultValue: '', description: 'Enter artifact ID (optional)'),
                                string(name: 'cr_number', defaultValue: '', description: 'Enter CR Number for Production Deployment')
                            ])
                        ])

                        def templateId = "110777"
                        def containers = "container01"
                        def jqCli = "${pwd()}/jq"
                        def file = "Cluster.json"
                        def clusterSafeUrl = "clusterSafeUrl.json"
                        def clusterNameFile = "ClusterName.json"
                        def deployments = load "${pwd()}/deployment.groovy"
                        def environment = params.Environment

                        def Clusters_List = sh(
                            script: "cat ${file} | ${jqCli} -r .'${environment}'",
                            returnStdout: true
                        ).trim()

                        def ClusterName = sh(
                            script: "cat ${clusterNameFile} | ${jqCli} -r .'${environment}'",
                            returnStdout: true
                        ).trim()

                        def Cluster_Safe_URL = sh(
                            script: "cat ${clusterSafeUrl} | ${jqCli} -r .'${environment}'",
                            returnStdout: true
                        ).trim()

                        def Hostname = params.HostName

                        if (Hostname.trim() == "") {
                            error "Error! Host_Name is empty. Please enter a value."
                        }

                        def extravars = """{
                            "hostname": "${Hostname}",
                            "artifactId": "${params.artifactId}",
                            "cluster": "${Clusters_List}",
                            "container": "${containers}",
                            "env": "${environment}",
                            "cluster_safe_url": "${Cluster_Safe_URL}",
                            "mancenter": "${params.mancenter}",
                            "Logging_type": "${params.Logging_type}",
                            "sourcePath": "${params.sourcePath}",
                            "destPath": "${params.destPath}"
                        }"""

                        if (environment.toLowerCase().startsWith("prod")) {
                            timeout(time: 120, unit: 'SECONDS') {
                                def userInput = input(
                                    id: 'Input-username',
                                    message: 'Provide production deployment details',
                                    parameters: [
                                        string(name: 'Username', description: 'Enter Username'),
                                        password(name: 'Password', description: 'Enter Password')
                                    ]
                                )

                                userName = userInput['Username']
                                password = userInput['Password'].toString()

                                if (params.cr_number.trim() == "") {
                                    error "Error! CR Number is empty for Production Environment."
                                }

                                extravars = """{
                                    "cr_number": "${params.cr_number}",
                                    "hostname": "${Hostname}",
                                    "artifactId": "${params.artifactId}",
                                    "cluster": "${Clusters_List}",
                                    "container": "${containers}",
                                    "env": "${environment}",
                                    "cluster_safe_url": "${Cluster_Safe_URL}",
                                    "mancenter": "${params.mancenter}",
                                    "Logging_type": "${params.Logging_type}",
                                    "sourcePath": "${params.sourcePath}",
                                    "destPath": "${params.destPath}"
                                }"""
                            }
                        }

                        println("Extra-Vars are: ${extravars}")
                        deployments.getApproval("Approve: To update config files into cluster", "HZ-approvers")
                        deployments.triggerAnsibleTower(templateId, environment, extravars, userName, password)
                    }
                }
            }
        }
    }
}
